// Code generated by go-bindata.
// sources:
// public/swagger/swagger.json
// public/swagger/swagger.yaml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicSwaggerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x4b\x6b\x1c\x47\x10\xfe\x2b\x45\x29\x87\x24\x8c\xb4\x6b\x47\x11\xc9\x84\x1c\x02\x8e\x88\x09\x01\x23\x84\x2f\xc1\x84\xda\xe9\x9a\xdd\x36\xfd\x18\xf7\x63\x25\xb3\xcc\x7f\x0f\xd5\x3d\xb3\x9e\xdd\x20\x2c\x1f\x72\xb3\x2e\xa3\xed\x7a\x7d\xf5\xd5\x57\xdd\x07\x8c\x0f\xb4\xdd\x72\xc0\x16\x5f\x5e\xad\xb1\x41\xed\x7a\x8f\xed\x01\x93\x4e\x86\xb1\xc5\xfb\x1d\x43\xaf\x0d\x47\xe0\x47\xb2\x83\x61\x6c\x50\x71\xec\x82\x1e\x92\xf6\x0e\x5b\xfc\xcd\xcd\x26\x48\x1e\x22\x87\x3d\x43\x4c\x94\x74\x07\x14\x23\xa7\x88\x0d\xee\x39\xc4\xea\x8d\x63\x83\x9d\x77\x31\x5b\x8e\xd8\xfe\x8d\x34\x0c\x46\x77\x24\xb9\x56\xef\xa3\x77\xd8\x9c\x1c\x3d\x5a\x73\x76\xb2\xf5\x9b\x73\x9f\x4b\x39\x7b\xd7\xe0\x10\xbc\xca\xdd\xff\x90\x97\xd2\x2e\x0a\x29\xab\xd8\xed\xd8\xd2\xea\x20\x8c\xc8\xe9\x28\xa7\x5b\x4e\xf2\x89\xd9\x5a\x0a\x1f\xb1\xc5\x57\xfe\xc1\x19\x4f\x0a\x86\xbc\x31\xba\x9b\xa3\xb0\x41\x3f\x70\x28\xc9\x5f\x2b\x6c\xb1\x9e\x5f\xcc\xf6\xef\xe7\xac\x28\x25\x03\x59\x4e\x1c\xa4\x99\x03\x3a\xb2\x32\x8c\x85\x83\x16\x32\xa7\xff\x4f\xe7\x71\xc7\x86\x92\xde\xd7\xb1\xc1\xe4\x12\xf8\x43\xd6\x81\x15\xb6\x29\x64\x6e\x30\x7d\x1c\x24\x61\x4c\x41\xbb\x2d\x8e\xef\xc4\x23\x0e\xde\x45\x2e\x8d\xbe\x5c\xaf\xe5\x73\x9a\xf8\x56\xf2\xa9\xa9\x37\x56\xd8\x4c\x0d\x14\xb9\xd4\x7c\x52\x12\xc7\xb1\xc1\xeb\xf5\xf5\x13\x09\x9c\x4f\xd0\xfb\xec\x4e\xe3\xbf\x09\xdc\x63\x8b\x17\x2b\xc5\xbd\x76\x5a\x02\xe2\x8a\x43\xf0\x01\x47\xf9\x6b\x70\x35\x29\xf5\x8b\xc9\x9f\xc2\xfe\xcb\x7e\x35\x5c\x1c\x3d\xbe\xf2\xff\x34\xff\xa3\x74\x79\xb4\x48\x44\x35\x2e\x6e\x8a\xbf\x58\x69\x12\x1c\xa0\x15\xbb\xa4\x7b\xcd\xa1\x85\xe5\x42\xed\x9d\xba\xda\x7a\xba\x2a\xa1\xbf\xc0\x5e\xf3\xc3\xaf\x8a\x7b\xca\x26\xe1\x91\x12\xbf\x79\xcf\x9d\xfc\x1e\x82\xcc\x2b\xe9\xca\x48\xe7\x15\x2f\x1a\x9d\x88\x3b\xe7\x9e\xdc\xb2\xe0\x65\x1c\xb8\xd3\xbd\xee\xa0\x54\x04\xc9\xd1\x00\x3f\x0e\x81\x63\x64\x05\x14\x81\xa0\x66\x82\x3d\x99\xcc\x57\xd8\xe0\x7c\xcd\xb5\xa8\xdd\x9e\x8c\x56\xff\x14\x13\x16\x06\x12\x69\xf3\x0c\x14\xb0\xcb\x96\xdc\x65\x60\x52\xb4\x31\x2c\x25\x0d\xb9\x82\x09\x8e\x98\x92\x87\xb4\xd3\x11\x7c\xd7\xe5\x10\xd8\x75\x0c\xbe\x87\xb4\x63\x18\x82\xdf\x18\xb6\xa7\x68\xde\x0a\x0a\xf1\x78\xfd\x0a\x6c\x8e\x09\x36\x0c\xe4\x40\xbb\xc4\x72\x7f\x8f\x0d\x6a\xf5\x1c\x68\xd9\xe9\x0f\x79\x39\x23\xe8\x7d\xa8\x48\x06\x0a\x49\x77\xd9\x50\x78\x2e\xa8\x1f\x6e\x5f\xdc\xfe\xf9\xf6\xee\x4e\xca\x5b\x4e\x4b\x29\x1e\xe7\x78\x0e\x40\xfc\xa0\x5a\xa1\xf3\x2e\x91\x76\x32\x00\x27\xf3\x4a\xe4\x14\x05\x55\x7c\x2e\xe5\x29\x0a\xb6\xb2\x46\x1b\x9f\x53\xc1\x51\x46\x79\x82\x42\x24\x68\x39\x26\xb2\x03\xb6\x2f\xae\x7f\xfc\xe9\x66\xfd\xf3\xfa\xe6\x66\x6c\x90\x94\x2a\x82\x25\xf3\x66\x21\x26\xd9\xc0\xb1\x41\x79\xa3\x72\xfc\x3c\x65\x52\xf4\x8f\xfb\xfb\x37\x50\x03\x8a\x8a\x66\x95\x6d\xea\xa3\x57\xd9\xab\x04\x7d\x81\xc0\xae\xd7\x6b\xac\x9b\xb5\xac\xf7\x7b\xd1\xea\x7c\x1d\x80\x95\xb5\x82\xb2\x57\xdf\x4e\xcb\x52\x36\xe7\xbb\x53\x0a\xea\x7e\x9c\x69\xf6\x93\x64\x3f\x27\x9f\xaa\x9e\x4f\xf3\x5c\x8c\xf3\x09\x6e\x67\xfa\xa6\x2e\xc6\xf1\xdf\x00\x00\x00\xff\xff\x8b\xc8\xb0\xdc\x4c\x08\x00\x00")

func publicSwaggerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_publicSwaggerSwaggerJson,
		"public/swagger/swagger.json",
	)
}

func publicSwaggerSwaggerJson() (*asset, error) {
	bytes, err := publicSwaggerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/swagger/swagger.json", size: 2124, mode: os.FileMode(420), modTime: time.Unix(1503216297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicSwaggerSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4b\x6f\x1b\x37\x10\xbe\xeb\x57\x0c\xd6\x05\xdc\x97\xa4\x4d\xaa\x16\x0d\x8b\x1e\x0a\xa4\x46\x83\xa2\x40\x60\x18\xb9\x16\x23\x72\x56\x9a\x80\xaf\xf0\x21\x3b\x28\xfa\xdf\x0b\x72\x77\xa5\x5d\x59\x89\x7d\xe8\xa1\x87\xde\x8c\xd9\x99\xe1\xf7\x22\x2d\xe9\x6c\xcc\x86\xa2\x58\x2c\x01\xbd\xd7\x2c\x31\xb1\xb3\xeb\xf7\xd1\xd9\xb3\xd2\x83\xd1\x67\x95\x9d\xdb\x9e\xf7\x2c\x4b\x4d\x51\xc7\x96\x4b\x21\x8a\x05\x00\x85\xe0\x42\xf9\x03\x40\x51\x94\x81\x7d\xf9\x24\xe0\xd7\x52\x87\x40\xd1\x3b\x1b\x09\x0c\x29\x46\x48\x1f\x3d\xc1\x97\x8a\x3a\xcc\x3a\xc1\x81\xe9\xfe\xab\x3a\x49\x0f\x68\xbc\xa6\x7e\x0d\x80\x74\x8a\x04\xb0\x3d\xa0\x66\xf5\xe7\x01\x75\xa6\xe1\x8b\xa2\x84\xac\x05\xbc\x2b\x35\x70\x1d\xbc\x79\x0d\x26\xc7\x04\x5b\x02\xb4\xc0\x36\xd1\x8e\xc2\xd0\xcc\x4a\xc0\x77\x37\x2f\x6e\x7e\x7f\x77\x7b\x3b\x94\x0c\x25\x1c\x4f\x01\x48\x6c\x28\x26\x34\x5e\xc0\x8b\xd5\xe6\xfb\x1f\x7f\x68\x5f\xd1\x37\xed\xab\xe1\x7b\x4c\x98\x72\x14\xd0\x6c\xda\xb6\xa9\x35\x1f\x9c\xa7\x90\x98\xe2\x0c\xe9\x71\xdf\x4c\x00\xb4\x53\xf1\x96\xd1\x93\xe4\x8e\x65\x2f\x58\x1d\xfc\x16\xe8\xc1\x07\x8a\x91\x14\x60\x04\x84\x98\x02\xdb\x1d\x54\xc2\xab\xe3\xd6\x51\x9c\x8b\x82\x40\xd5\x54\x0c\xa3\x73\x95\x3e\x81\x0b\xf6\xd9\xa0\x5d\x06\x42\x85\x5b\x4d\x05\x84\x46\x5b\x51\xc2\x11\x65\x72\x90\xf6\x1c\xc1\x49\x99\x43\x20\x2b\xab\xda\x69\x7f\x3a\xb7\xca\xb1\xd5\x64\x2e\x20\x7d\x96\x3d\x17\xa1\xb3\xfa\x24\xec\x6c\xf9\x43\x26\x60\x45\x36\x71\xc7\x14\xa0\x73\xa1\x47\xe9\x31\x24\x96\x59\x63\x78\x0c\xf8\x33\x30\xcf\xc2\x71\x11\xd0\x3c\x31\xa8\x54\x8d\x3e\xea\xb7\xa7\x2c\x40\x0a\x13\x3f\xce\x50\x97\x79\x70\xdb\xf7\x24\x13\x48\x67\x13\xb2\x2d\x1e\xdb\x12\x89\x84\x56\x61\x50\xb5\x67\xc9\xb6\x73\xc1\xf4\x36\xe0\xd6\xe5\x34\x51\xba\xd0\xa8\xb9\x79\x4c\x62\xda\xf5\xd9\x38\x8f\xec\x7a\x2c\xf3\x8c\x5f\x06\x5f\x4e\xfd\xed\xee\xee\xed\xd0\x55\x33\x3b\x66\xba\x04\x67\xcc\xc8\x20\xf0\x3c\xce\x13\x5c\x4f\x06\xfb\x74\xc3\x2e\x9a\x90\x38\x95\xae\xeb\x3f\xca\x1b\x52\x9f\x90\x53\x06\xc4\xec\x85\x3a\x58\xb5\xda\x39\x5c\x55\xad\x7e\xaa\x0f\xcc\xcf\xc3\x6b\x73\xbd\x78\x24\x41\x51\xbc\x50\x9f\x91\xfe\xc5\x8e\xb8\x0a\xbf\x48\xe1\x40\x95\x3f\x4b\xc0\x18\x29\x15\x62\x03\xa0\xbb\x3d\x41\xc7\x9a\xe2\x38\xb1\x00\x38\x50\x88\x75\x4f\xd3\x2c\x3c\xa6\x7d\xd5\x76\x1d\xe5\x9e\x0c\xae\xff\x2a\xdd\xa5\xfa\x77\xaf\xf8\x8e\xd2\x28\x7d\x09\x53\xe5\xf0\x46\x09\xe8\xdb\xaf\xc6\xb1\xaf\xc7\xb1\xa1\xd7\x63\x40\x43\x89\xc2\xd1\xb8\xe5\x9c\xc3\x2d\x69\x4c\x7c\xe8\xd1\xc1\x64\x12\x80\xad\x98\x17\x2c\x1a\x12\x70\x76\x02\x40\xa0\x0f\x99\x03\xa9\xb3\x70\x5f\xb8\x20\xe3\x13\x3f\x49\x51\xf3\xb2\x6d\x9b\x69\x32\x67\xe8\x6e\x0a\x28\xe5\xee\xad\x76\xa8\x48\x4d\xda\x7a\xbe\xd3\xc1\xf1\xc4\x82\xef\xb4\x7e\xd3\x6e\x9e\x58\x6f\x5d\x82\xce\x65\xfb\xd4\xf6\x2f\x02\x75\x02\xae\xaf\xd6\x93\xff\x6a\xeb\x9a\x9e\xeb\xf1\x86\x64\x63\x30\x7c\x14\xf0\x7a\x40\x0c\x3e\x6f\x35\xcb\xd1\x9c\x6a\xef\x3d\xee\x76\x14\x9e\xef\x6f\xdf\x7f\x75\x1c\xfc\xdf\xe1\xff\xa4\xc3\x83\x3b\x0b\x1f\x9c\xca\xf2\x5f\xfe\x1d\x35\x6c\x17\xd0\xbc\x5c\xb5\xcd\xe2\x9f\x00\x00\x00\xff\xff\x92\x71\xf9\x37\xac\x09\x00\x00")

func publicSwaggerSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_publicSwaggerSwaggerYaml,
		"public/swagger/swagger.yaml",
	)
}

func publicSwaggerSwaggerYaml() (*asset, error) {
	bytes, err := publicSwaggerSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/swagger/swagger.yaml", size: 2476, mode: os.FileMode(420), modTime: time.Unix(1503216297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/swagger/swagger.json": publicSwaggerSwaggerJson,
	"public/swagger/swagger.yaml": publicSwaggerSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"swagger": &bintree{nil, map[string]*bintree{
			"swagger.json": &bintree{publicSwaggerSwaggerJson, map[string]*bintree{}},
			"swagger.yaml": &bintree{publicSwaggerSwaggerYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

